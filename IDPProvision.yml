AWSTemplateFormatVersion: "2010-09-09"
Description: "Provision SAML IDP Metadata and enteprise roles"
Parameters:
  SamlProviderName:
    Type: String
    Description: "IAM SAML PROVIDER NAME"
    Default: "<Your SAML Provider Name>"
  SamlProviderUrl:
    Type: String
    Description: "IAM SAML PROVIDER URL"
    Default: "<Your public federation metadata - can be https or s3://>"
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iam:*SamlProvider
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
  IdentityProvider:
    Type: Custom::IdentityProvider
    Properties:
      ServiceToken: !GetAtt ProviderCreator.Arn
      Region: !Ref "AWS::Region"
      MetadataUrl: !Ref SamlProviderUrl
      Name: !Ref SamlProviderName
  ProviderCreator:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.7
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: !Sub |
          import boto3
          import json
          import os
          import cfnresponse
          from botocore.vendored import requests
          from botocore.exceptions import ClientError
          iam = boto3.client("iam")
          def getUrlText(requestUrl):
            if (requestUrl.find('s3://') == 0):
              removeProto = requestUrl[5:]
              spos = removeProto.find('/')
              bucket = removeProto[0:spos]
              key = removeProto[spos+1:]
              s3 = boto3.client('s3')
              obj = s3.get_object(Bucket=bucket, Key=key)
              returnText = obj['Body'].read().decode('utf-8')
            else:
              r = requests.get(requestUrl)
              returnText = r.text
            return returnText
          def create_provider(name, doc):
            try:
              resp = iam.create_saml_provider(SAMLMetadataDocument=doc,Name=name)
              return(True, resp['SAMLProviderArn'])
            except Exception as e:
              return (False, "Cannot create SAML provider: " + str(e))
          def delete_provider(arn):
            try:
              resp = iam.delete_saml_provider(SAMLProviderArn=arn)
              return (True, "SAML provider with ARN " + arn + " deleted")
            except ClientError as e:
              if e.response['Error']['Code'] == "NoSuchEntity":
                # no need to delete a thing that doesn't exist
                return (True, "SAML provider with ARN " + arn + " does not exist, deletion succeeded")
              else:
                return (False, "Cannot delete SAML provider with ARN " + arn + ": " + str(e))
            except Exception as e:
              return (False, "Cannot delete SAML provider with ARN " + arn + ": " + str(e))
          def update_provider(arn, doc):
            # Need to create the ARN from the name
            arn = "arn:aws:iam::${AWS::AccountId}:saml-provider/" + name
            try:
              resp = iam.update_saml_provider(SAMLMetadataDocument=doc, SAMLProviderArn=arn)
              return (True, "SAML provider " + arn + " updated")
            except Exception as e:
              return (False, "Cannot update SAML provider " + arn + ": " + str(e))
          def lambda_handler(event, context):
            provider_xml_url = event['ResourceProperties']['MetadataUrl']
            provider_xml = getUrlText(provider_xml_url)
            provider_name = event['ResourceProperties']['Name']
            # create a default ARN from the name; will be overwritten if we are creating
            provider_arn = "arn:aws:iam::${AWS::AccountId}:saml-provider/" + provider_name
            if event['RequestType'] == 'Create':
              res, provider_arn = create_provider(provider_name, provider_xml)
              reason = "Creation succeeded"
            elif event['RequestType'] == 'Update':
              res, reason = update_provider(provider_arn, provider_xml)
            elif event['RequestType'] == 'Delete':
              res, reason = delete_provider(provider_arn)
            else:
              res = False
              resp = "Unknown operation: " + event['RequestType']
            responseData = {}
            responseData['Reason'] = reason
            if res:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, provider_arn)
            else:
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData, provider_arn)
  AdminRole:
    Type: AWS::IAM::Role
    DependsOn: IdentityProvider
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated:
                - !Sub "arn:aws:iam::${AWS::AccountId}:saml-provider/${SamlProviderName}"
            Action: "sts:AssumeRoleWithSAML"
            Condition:
              StringEquals:
                "SAML:aud": "https://signin.aws.amazon.com/saml"
      Description: "Auto Created by Account Provisioning Day 2 Process for Administrator Access"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AdministratorAccess"
      MaxSessionDuration: 3600
      RoleName: Federated-Administrator
      Tags:
        - Key: "ACCESS_TYPE"
          Value: "Administrator"
        - Key: "IDP"
          Value: "SAML"
  BillingRole:
    Type: AWS::IAM::Role
    DependsOn: IdentityProvider
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated:
                - !Sub "arn:aws:iam::${AWS::AccountId}:saml-provider/${SamlProviderName}"
            Action: "sts:AssumeRoleWithSAML"
            Condition:
              StringEquals:
                "SAML:aud": "https://signin.aws.amazon.com/saml"
      Description: "Auto Created by Account Provisioning Day 2 Process for billing users"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/job-function/Billing"
      MaxSessionDuration: 3600
      RoleName: Federated-Billing
      Tags:
        - Key: "ACCESS_TYPE"
          Value: "Finance"
        - Key: "IDP"
          Value: "SAML"
  DeveloperRole:
    Type: AWS::IAM::Role
    DependsOn: IdentityProvider
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated:
                - !Sub "arn:aws:iam::${AWS::AccountId}:saml-provider/${SamlProviderName}"
            Action: "sts:AssumeRoleWithSAML"
            Condition:
              StringEquals:
                "SAML:aud": "https://signin.aws.amazon.com/saml"
      Description: "Auto Created by Account Provisioning Day 2 Process for developer access"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/PowerUserAccess"
      MaxSessionDuration: 3600
      RoleName: Federated-Developer
      Tags:
        - Key: "ACCESS_TYPE"
          Value: "Developer"
        - Key: "IDP"
          Value: "SAML"
  ReadonlyRole:
    Type: AWS::IAM::Role
    DependsOn: IdentityProvider
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated:
                - !Sub "arn:aws:iam::${AWS::AccountId}:saml-provider/${SamlProviderName}"
            Action: "sts:AssumeRoleWithSAML"
            Condition:
              StringEquals:
                "SAML:aud": "https://signin.aws.amazon.com/saml"
      Description: "Auto Created by Account Provisioning Day 2 Process for read only access"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/ReadOnlyAccess"
      MaxSessionDuration: 3600
      RoleName: Federated-ReadOnly
      Tags:
        - Key: "ACCESS_TYPE"
          Value: "ReadOnly"
        - Key: "IDP"
          Value: "SAML"
